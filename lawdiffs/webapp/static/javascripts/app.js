// Generated by CoffeeScript 1.5.0
(function() {
  var APP_NAME, DIRECTIVE_MODULE, SERVICES_MODULE, app;

  APP_NAME = 'myLilApp';

  DIRECTIVE_MODULE = "" + APP_NAME + ".directives";

  SERVICES_MODULE = "" + APP_NAME + ".directives";

  angular.module(DIRECTIVE_MODULE, []);

  angular.module(SERVICES_MODULE, []);

  angular.module(DIRECTIVE_MODULE).directive('topNavbar', function($location) {
    var directive;
    return directive = {
      replace: true,
      template: "<div class=\"navbar\">\n    <div class=\"navbar-inner\">\n        <a class=\"brand\" href=\"#\">{{appName}}</a>\n        <ul class=\"nav\">\n            <li ng-repeat=\"link in navLinks\"\n                ng-class=\"{active: currentPath == link.href}\">\n                    <a href=\"{{link.href}}\">{{link.title}}</a>\n            </li>\n        </ul>\n    </div>\n</div>",
      link: function(scope) {
        scope.navLinks = [
          {
            href: '/',
            title: 'Home'
          }
        ];
        return scope.$on("$routeChangeSuccess", function(e, current, previous) {
          return scope.currentPath = $location.path();
        });
      }
    };
  });

  angular.module(DIRECTIVE_MODULE).directive('userFeedback', function() {
    var directive;
    return directive = {
      template: "<div class=\"row-fluid\" ng-show=\"fbModel.html\">\n    <div class=\"span12 alert {{fbModel.alertClass}}\">\n        <span class=\"{{fbModel.iconClass}}\" ng-show=\"fbModel.iconClass\"></span>\n        <span ng-bind-html-unsafe=\"fbModel.html\"></span>\n    </div>\n</div>",
      link: function(scope) {
        var setFeedback;
        scope.fbModel = {};
        setFeedback = function(html, alertClass, iconClass) {
          scope.fbModel.html = html;
          scope.fbModel.alertClass = alertClass;
          return scope.fbModel.iconClass = iconClass;
        };
        scope.$on('feedback', function(html, alertClass, iconClass) {
          return setFeedback(html, alertClass, iconClass);
        });
        scope.$on('successFeedback', function(e, html) {
          return setFeedback(html, 'alert-success', 'icon-thumbs-up');
        });
        scope.$on('errorFeedback', function(e, html) {
          return setFeedback(html, 'alert-error', 'icon-exclamation-sign');
        });
        scope.$on('warnFeedback', function(e, html) {
          return setFeedback(html, '', 'icon-info-sign');
        });
        return scope.$on('clearFeedback', function(e) {
          return setFeedback(null, '', '');
        });
      }
    };
  });

  angular.module(SERVICES_MODULE).factory('UrlBuilder', function() {
    var UrlBuilder;
    UrlBuilder = (function() {

      function UrlBuilder() {}

      UrlBuilder.prototype.API_PREFIX = '/api';

      UrlBuilder.prototype.apiUrl = function(url) {
        return this.API_PREFIX + url;
      };

      return UrlBuilder;

    })();
    return new UrlBuilder();
  });

  app = angular.module(APP_NAME, [DIRECTIVE_MODULE, SERVICES_MODULE]).run(function($rootScope) {
    return $rootScope.appName = "My Lil' App";
  });

  angular.module('myLilApp').controller('HomeCtrl', function($scope, $http, $rootScope, Laws) {
    return Laws.fetch().then(function(data) {
      $scope.laws = data;
      return console.log('$scope.laws:', $scope.laws);
    });
  });

  angular.module('myLilApp').config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      $routeProvider.when('/', {
        controller: 'HomeCtrl',
        templateUrl: 'static/partials/home.html'
      }).otherwise({
        redirectTo: '/'
      });
      return $locationProvider.html5Mode(true).hashPrefix('!');
    }
  ]);

  angular.module(SERVICES_MODULE).factory('Laws', function($http, $q, UrlBuilder) {
    var Laws;
    Laws = (function() {

      function Laws() {}

      Laws.prototype.fetch = function() {
        var deferred;
        deferred = $q.defer();
        $http.get(UrlBuilder.apiUrl('/laws/or')).success(function(response) {
          return deferred.resolve(response);
        });
        return deferred.promise;
      };

      return Laws;

    })();
    return new Laws();
  });

}).call(this);
